import { BotContext } from './context';
import { Roles } from './action_buttons';
import botErrHandler from './botErrHandler';

import { validateEmail } from 'src/utils/validateEmail';
import generateTextFromArr from 'src/utils/generateTextFromArr';
import { Markup } from 'telegraf';
import { PrismaService } from 'src/prisma.service';

const prisma = new PrismaService();

export enum Sessions {
  REGISTRATION_ROLE = 'REGISTRATION',
  REGISTRATION_NAME = 'REGISTRATION_NAME',
  REGISTRATION_PROMO_CODE = 'REGISTRATION_PROMO_CODE',
  REGISTRATION_SPECIALIZATION = 'REGISTRATION_PROMO_SPECIALIZATION',
  REGISTRATION_EMAIL = 'REGISTRATION_EMAIL',
  REGISTRATION_AGE = 'REGISTRATION_AGE',
  REGISTRATION_ABOUT = 'REGISTRATION_ABOUT',
  REGISTRATION_PRODUCT_CATEGORIES = 'REGISTRATION_PRODUCT_CATEGORIES',
}

const textHandler = {
  // ROLE
  [Sessions.REGISTRATION_ROLE]: async (
    ctx: BotContext,
    endCallBack?: (ctx: BotContext, role: Roles) => void,
  ) => {
    const messageText = getMessage(ctx.message);

    if (!messageText) return botErrHandler.incorrectMessage(ctx);

    const isFreelancer = messageText.toLocaleLowerCase() === '—è —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä';
    const isCustomer = messageText.toLocaleLowerCase() === '—è –∑–∞–∫–∞–∑—á–∏–∫';

    if (!isFreelancer && !isCustomer)
      return botErrHandler.incorrectMessage(ctx);

    const role = isFreelancer ? Roles.FREElANCER : Roles.CUSTOMER;

    endCallBack && endCallBack(ctx, role);
  },

  //ABOUT
  [Sessions.REGISTRATION_ABOUT]: async (
    ctx: BotContext,
    endCallBack: (ctx: BotContext) => void,
  ) => {
    const messageText = getMessage(ctx.message);

    if (!messageText) return botErrHandler.incorrectMessage(ctx);

    if (messageText.length < 100)
      return ctx.reply(
        generateTextFromArr([
          '–í—ã –≤–≤–µ–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ',
          '–ø—Ä–æ—Ñ–∏–ª—è (–º–∏–Ω–∏–º—É–º - 100 —Å–∏–º–≤.). –ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —É–∫–∞–∑–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ,',
          '–∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏–≤–ª–µ—á–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑—á–∏–∫–∞.',
        ]),
      );

    ctx.session.about = messageText;
    endCallBack(ctx);
  },

  [Sessions.REGISTRATION_PRODUCT_CATEGORIES]: async (
    ctx: BotContext,
    endCallBack: (ctx: BotContext) => void,
  ) => {
    const messageText = String(getMessage(ctx.message));

    if (!messageText) return botErrHandler.incorrectMessage(ctx);

    if (messageText.toLocaleLowerCase() === '–¥–∞–ª–µ–µ') {
      return endCallBack(ctx);
    }

    let isInclude = false;
    if (!ctx.session.categories?.length) {
      ctx.session.categories = [];
    }

    ctx.session.categories.forEach((cat) => {
      if (cat === messageText) {
        isInclude = true;
      }
    });

    if (isInclude) {

      ctx.session.categories = ctx.session.categories.filter(
        (cat) => cat !== messageText,
      );

    } else {
      ctx.session.categories.push(messageText);
    }

    const styledArr = ctx.session.categories.map((cat) => `üî∑${cat}`);

    const categories = await prisma.categorie.findMany();

    const keyboard = Markup.keyboard([
      ...categories.map((cat) => {
        return Markup.button.callback(cat.name, cat.name);
      }),
      Markup.button.callback('–î–∞–ª–µ–µ', 'next'),
    ]);

    keyboard.reply_markup.resize_keyboard = true;

    ctx.reply(
      `
    –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n${styledArr.join(
      '\n',
    )} \n\n–í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –µ—â–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å –î–∞–ª–µ–µ!
    `,
      keyboard,
    );
  },

  // NAME HANDLER
  [Sessions.REGISTRATION_NAME]: async (
    ctx: BotContext,
    endCallBack: (ctx: BotContext) => void,
  ) => {
    const messageText = String(getMessage(ctx.message));

    if (!messageText) return botErrHandler.incorrectMessage(ctx);

    if (messageText.toLocaleLowerCase() === '–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–∞–∫') {
      ctx.session.name = ctx.message?.from.first_name as string;
    } else {
      ctx.session.name = messageText;
    }
    endCallBack(ctx);
  },

  // PROMO CODE HANDLER
  [Sessions.REGISTRATION_PROMO_CODE]: async (
    ctx: BotContext,
    endCallBack: (ctx: BotContext) => void,
  ) => {
    const messageText = getMessage(ctx.message);

    if (!messageText) return botErrHandler.incorrectMessage(ctx);

    if (messageText.toLocaleLowerCase() === '–Ω–µ—Ç –ø—Ä–æ–º–æ-–∫–æ–¥–∞') {
      return ctx.reply(
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ email/—Ç–µ–ª/—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º. –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤–∞–º –≤—ã–¥–∞–¥—É—Ç –ø—Ä–æ–º–æ–∫–æ–¥, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ:',
      );
    }

    if (messageText.toLocaleLowerCase() === '1111') {
      return endCallBack(ctx);
    }

    return ctx.reply(
      generateTextFromArr([
        '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è.',
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ email/—Ç–µ–ª/—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º.',
        '–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤–∞–º –≤—ã–¥–∞–¥—É—Ç –ø—Ä–æ–º–æ–∫–æ–¥, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ:',
      ]),
    );
  },

  // SPECIALIZATION CODE HANDLER
  [Sessions.REGISTRATION_SPECIALIZATION]: async (
    ctx: BotContext,
    endCallBack: (ctx: BotContext, specialization: string) => void,
  ) => {
    const messageText = getMessage(ctx.message);

    if (!messageText) return botErrHandler.incorrectMessage(ctx);
    let specialization = '';

    if (messageText.toLocaleLowerCase() === '—è –∫–æ–Ω—Ç–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä') {
      specialization = 'content_manager';
    }
    if (messageText.toLocaleLowerCase() === '—è –¥–∏–∑–∞–π–Ω–µ—Ä') {
      specialization = 'designer';
    }
    if (messageText.toLocaleLowerCase() === '—è –º–µ–Ω–µ–¥–∂–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–æ–≤') {
      specialization = 'account_manager';
    }

    ctx.session.specialization = specialization;
    endCallBack(ctx, specialization);
  },

  // AGE
  [Sessions.REGISTRATION_AGE]: async (
    ctx: BotContext,
    endCallBack: (ctx: BotContext) => void,
  ) => {
    const age = Number(getMessage(ctx.message));

    if (!age) return botErrHandler.incorrectMessage(ctx);

    if (age < 16 || age > 70)
      return ctx.reply(
        '–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 16 - 70. –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–∏—Ñ—Ä–∞–º–∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤:',
      );

    ctx.session.age = age;
    endCallBack(ctx);
  },

  // EMAIL
  [Sessions.REGISTRATION_EMAIL]: async (
    ctx: BotContext,
    endCallBack: (ctx: BotContext) => void,
  ) => {
    const messageText = getMessage(ctx.message);

    if (!messageText) return;

    const isValidEmail = validateEmail(messageText);

    if (!isValidEmail)
      return ctx.reply(
        '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π E-mail. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
      );

    ctx.session.email = messageText;
    endCallBack(ctx);
  },
};

export default textHandler;

function getMessage(object: any): string | null {
  if (typeof object !== 'object') return null;

  let messageText = '';

  for (const key in object) {
    if (key === 'text') {
      messageText = object[key];
      break;
    }
  }

  return messageText;
}
