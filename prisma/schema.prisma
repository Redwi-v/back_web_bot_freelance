// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  index String @unique
  User  User[]
}

model User {
  id         Int    @id @default(autoincrement())
  telegramId String @unique

  telegramLink String

  activeRole Role?  @relation(fields: [roleIndex], references: [index])
  roleIndex  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email     String  @unique
  age       Int
  name      String
  about     String?
  lastName  String?
  avatarUrl String?

  lastVisitTime  DateTime?

  rating Float @default(0)
  rate   Int?

  responses Response[]

  specializations Specialization[]
  categories      Categorie[]

  reviewsList       Review[] @relation("User")
  reviewsListAuthor Review[] @relation("Author")

  Orders         Order[]   @relation("orders")
  executedOrders Order[]   @relation("executedOrders")
  Connects       Connect[] @relation("connects")
  youjoined      Connect[] @relation("youJoined")

  portfolio Project[]
}

model Connect {
  id Int @id @default(autoincrement())

  userId Int
  User   User @relation(name: "connects", fields: [userId], references: [id])

  user2Id Int
  user2   User? @relation(name: "youJoined", fields: [user2Id], references: [id])

  order   Order @relation(fields: [orderId], references: [id])
  orderId Int

  isChecked Boolean @default(false)

  Review Review?
}

model Response {
  id Int @id @default(autoincrement())

  text String

  User   User @relation(fields: [userId], references: [id])
  userId Int

  Order   Order @relation(fields: [orderId], references: [id])
  orderId Int
}

model Order {
  id    Int    @id @default(autoincrement())
  title String

  // inSearch - inWork - inArchive - completed 
  status String @default("inSearch")

  description String
  price       Int

  author             User     @relation(name: "orders", fields: [authorId], references: [id])
  authorId           Int
  authorIsCloseOrder Boolean? @default(false)

  executor             User?    @relation(name: "executedOrders", fields: [executorId], references: [id])
  executorId           Int?
  executorIsCloseOrder Boolean? @default(false)

  responses       Response[]
  categories      Categorie[]
  specializations Specialization[]
  Connect         Connect[]
}

model Specialization {
  id    Int    @id @default(autoincrement())
  label String @unique()

  Order Order[]

  User User[]
}

model Review {
  id Int @id @default(autoincrement())

  text   String
  rating Float

  User   User? @relation(name: "User", fields: [userId], references: [id])
  userId Int?

  authorId Int
  Author   User @relation(name: "Author", fields: [authorId], references: [id])

  connect   Connect @relation(fields: [connectId], references: [id])
  connectId Int     @unique
}

model Categorie {
  id   Int    @id @default(autoincrement())
  name String @unique

  User      User[]
  Order     Order[]
  project   Project[]
}

model Project {
  id Int @id @default(autoincrement())

  title String

  description String
  categories  Categorie[]

  images File[]

  User   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model File {
  fileName     String @id @unique
  path         String
  originalname String

  project   Project? @relation(fields: [projectId], references: [id])
  projectId Int?
}
